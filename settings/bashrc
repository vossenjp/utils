# settings/bashrc: subshell environment settings
# To re-read (and implement changes to this file) use:
# source $SETTINGS/bashrc

# Only if bash in a terminal!
[ -t 1 -a -n "$BASH_VERSION" ] || return

# Fail-safe.  This should be set when we're called, but if not, the
# "not found" error messages should be pretty clear.
# Use leading ':' to prevent this from being run as a program after
# it is expanded.
: ${SETTINGS:='SETTINGS_variable_not_set'}

# DEBUGGING only--will break scp, rsync
# echo "Sourcing $SETTINGS/bash_profile..."
# export PS4='+xtrace $LINENO: '
# set -x

# Debugging/logging--will not break scp, rsync
#case "$-" in
#    *i*) echo "$(date '+%Y-%m-%d_%H:%M:%S_%Z') Interactive" \
#              "$SETTINGS/bashrc ssh=$SSH_CONNECTION" >> ~/rc.log ;;
#    *  ) echo "$(date '+%Y-%m-%d_%H:%M:%S_%Z') Non-interactive" \
#              "$SETTINGS/bashrc ssh=$SSH_CONNECTION" >> ~/rc.log ;;
#esac

# In theory this is also sourced from /etc/bashrc (/etc/bash.bashrc )
# or ~/.bashrc to apply all these settings to login shells too.  In practice
# if these settings only work sometimes (like in subshells), verify that.

# Source Keychain file (if it exists) for SSH and GPG agents
[ -r "$HOME/.keychain/${HOSTNAME}-sh" ]     && source "$HOME/.keychain/${HOSTNAME}-sh"
[ -r "$HOME/.keychain/${HOSTNAME}-sh-gpg" ] && source "$HOME/.keychain/${HOSTNAME}-sh-gpg"

# Set some more useful prompts
# Interactive command line prompt.
# ONLY set one of these if we really are interactive, since lots of people
# (even use sometimes) test to see if a shell is interactive using
# something like:  if [ "$PS1" ]; then
case "$-" in
    *i*)
        #export PS0='Start: \D{%Y-%m-%d_%H:%M:%S_%Z}\n'  # Pre-Exe prompt, bash v4.4+
        #export PS1='\n[\u@\h t:\l l:$SHLVL h:\! j:\j v:\V]\n$PWD\$ '
        #export PS1='\n[\u@\h:T\l:L$SHLVL:C\!:\D{%Y-%m-%d_%H:%M:%S_%Z}]\n$PWD\$ '
        #export PS1='\n[\u@\h:T\l:L$SHLVL:C\!:J\j:\D{%Y-%m-%d_%H:%M:%S_%Z}]\n$PWD\$ '
        export PS1='\n\[\033[01;32m\][\u@\h:T\l:L$SHLVL:C\!:J\j:\D{%Y-%m-%d_%H:%M:%S_%Z}]\[\033[00m\]\n$PWD\$ '
        #export PS2='> '                              # Secondary (i.e. continued) prompt
        #export PS3='Please make a choice: '          # Select prompt
        #export PS4='+xtrace $LINENO: '                # xtrace (debug) prompt
        export PS4='+xtrace $BASH_SOURCE:$LINENO:$FUNCNAME: ' # xtrace (debug) prompt

        # If this is an xterm set the title to user@host:dir
        case "$TERM" in
            xterm*|rxvt*) PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}:$PWD\007"'
            ;;
        esac
    ;;
esac

# Make sure custom inputrc is handled, if we can find it, note different
# names. Also note different order, since for this one we probably want
# our custom settings to over-ride the system file, if present.
for file in $SETTINGS/inputrc ~/.inputrc /etc/inputrc; do
    [ -r "$file" ] && export INPUTRC="$file" && break # Use first found
done

# No core files by default
# See also /etc/security/limits.conf on many Linux systems.
ulimit -S -c 0 > /dev/null 2>&1

# Set various aspects of the bash history
export HISTSIZE=5000          # Num. of commands in history stack in memory
export HISTFILESIZE=5000      # Num. of commands in history FILE
#export HISTCONTROL=ignoreboth # bash < 3, omit dups & lines starting with space
export HISTCONTROL='erasedups:ignoredups:ignorespace'
export HISTIGNORE='&:[ ]*'    # bash >= 3, omit dups & lines starting with space
#export HISTTIMEFORMAT='%Y-%m-%d_%H:%M:%S_%Z=' # bash >= 3, time-stamp hist file
shopt -s histappend           # Append rather than overwrite history on exit
shopt -q -s cdspell           # Auto-fix minor typos in interactive use of 'cd'
shopt -q -s checkwinsize      # Update the values of LINES and COLUMNS
shopt -q -s cmdhist           # Make multi-line commands 1 line in history
set -o notify   # (or set -b) # Immediate notification of bckgrnd job termintn.
set -o ignoreeof              # Don't let CTRL-D exit the shell

# Other bash settings
PATH="$PATH:/opt/bin"
export MANWIDTH=80          # man page width, use < 80 if COLUMNS=80 & less -N
export LC_COLLATE='C'         # Set traditional C sort order (e.g. UC first)
export HOSTFILE='/etc/hosts'  # Use /etc/hosts for host name completion
CDPATH='.:~/:..:../..' # Similar to $PATH, but for use by 'cd'
# Note that the '.' in $CDPATH is needed so that cd will work under POSIX mode
# but this will also cause cd to echo the new directory to STDOUT!
# Do NOT `export CDPATH`, see http://mywiki.wooledge.org/BashPitfalls#export_CDPATH.3D.:.2BAH4-.2FmyProject
# And see also "cdspell" above!

# Import bash completion settings, if they exist in the default location
# and if not already imported (e.g. "$BASH_COMPLETION_COMPAT_DIR" NOT set.
# This can take a second or two on a slow system, so you may not always
# want to do it, even if it does exist (which it doesn't by default on many
# systems, e.g. Red Hat).
if [ -z "$BASH_COMPLETION_COMPAT_DIR" ] && ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
      . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
    fi
fi

# Use a lesspipe filter, if we can find it.  This sets the $LESSOPEN variable
# Globally replace the $PATH ':' delimiter with space for use in a list
for path in $SETTINGS /opt/bin ~/ ${PATH//:/ }; do
    # Use first one found of 'lesspipe.sh' (preferred) or 'lesspipe' (Debian)
    [ -x "$path/lesspipe.sh" ] && eval $("$path/lesspipe.sh") && break
    [ -x "$path/lesspipe" ]    && eval $("$path/lesspipe")    && break
done

# Set other less & editor prefs (overkill)
export LESS="--LONG-PROMPT --LINE-NUMBERS --ignore-case --QUIET --no-init"
export VISUAL='vi'  # Set a default that should always work
# We'd rather use 'type -P' here, but that was added in bash-2.05b and we use
# systems we don't control with versions older than that.  We can't easily
# use 'which' since that produces output whether the file is found or not.
#for path in ${PATH//:/ }; do
#    # Overwrite VISUAL if we can find nano
#    [ -x "$path/nano" ] \
#      && export VISUAL='nano --smooth --const --nowrap --suspend' && break
#done
# See above notes re: nano for why we're using this for loop
for path in ${PATH//:/ }; do
    # Alias vi to vim in binary mode if we can
    [ -x "$path/vim" ] && alias vi='vim -b' && break
done
export EDITOR="$VISUAL"      # Yet Another Possibility
export SVN_EDITOR="$VISUAL"  # Subversion
alias edit=$VISUAL           # Provide a command to use on all systems

# Set ls options and aliases
# Note all the colorizing may or may not work depending on your terminal
# emulation and settings, esp. ANSI color. But it shouldn't hurt to have.
# See above notes re: nano for why we're using this for loop
for path in ${PATH//:/ }; do
    [ -r "$path/dircolors" ] && eval "$(dircolors)" \
      && LS_OPTIONS='--color=auto' && break
done
export LS_OPTIONS="$LS_OPTIONS -F -h"
# Using dircolors may cause csh scripts to fail with an
# "Unknown colorls variable 'do'." error.  The culprit is the ":do=01;35:"
# part in the LS_COLORS environment variable.  For a possible solution see
# http://forums.macosxhints.com/showthread.php?t=7287
# eval "$(dircolors)"
alias ls="ls $LS_OPTIONS"
alias ll="ls $LS_OPTIONS -l"
alias ll.="ls $LS_OPTIONS -ld"  # Usage: ll. ~/.*
alias la="ls $LS_OPTIONS -lA"
alias lrt="ls $LS_OPTIONS -Alrt"

# Read/write the clipboard using 'xsel' (-b = use the CLIPBOARD selection)
alias gc='xsel -b'           # Send X clipboard to STDOUT
alias pc='xsel -bi'          # Send STDIN to X clipboard
# Read/write the clipboard using 'xclip'
#alias gc='xclip -out         # Send X selection to STDOUT
#alias pc='xclip -in'         # Send STDIN to X selection
# Read/write the Paste Buffer for Mac:
#alias gc='pbpaste'           # Send Paste Buffer to STDOUT
#alias pc='pbcopy'            # Send STDIN to Paste Buffer
# Read/write the clipboard for Windows: ???
# pclip.exe/putclip.exe
# gclip.exe/getclip.exe

# Useful aliases
# Moved to a function: alias bot='cd $(dirname $(find . | tail -1))'
alias clr='cd ~/ && clear'   # Clear and return $HOME
alias cls='clear'            # DOS-ish for clear
alias cal='cal -M'           # Start calendars on Monday
alias copy='cp'              # DOS-ish for cp
#alias cp='cp -i'            # Annoying Red Hat default from /root/.bashrc
alias cvsst='cvs -qn update' # Hack to get concise CVS status (like svn st)
alias del='rm'               # DOS-ish for rm
alias df='df --print-type --exclude-type=tmpfs --exclude-type=devtmpfs'
alias diff='diff -u'         # Make unified diffs the default
alias gcm='git commit -m'    # Save a bit of typing
alias gau='git add -u'       # Save a bit of typing
alias jdiff="\diff --side-by-side --ignore-case --ignore-blank-lines\
  --ignore-all-space --suppress-common-lines" # Useful GNU diff command
alias dir='ls'               # DOS-ish for ls
alias hu='history -n && history -a' # Read New hist. lines; Append current lines
    alias hr='hu'  # "History Update" backwards compat to 'hr'
alias inxi='inxi -c19'       # (Ubuntu) system information script
alias ipconfig='ifconfig'    # Windows-ish for ifconfig
alias lesss='less -S'        # Don't wrap lines
alias locate='locate -i'     # Case-insensitive locate
alias man='LANG=C man'       # Display man pages properly
alias md='mkdir'             # DOS-ish for mkdir
alias move='mv'              # DOS-ish for mv
#alias mv='mv -i'            # Annoying Red Hat default from /root/.bashrc
alias ntsysv='rcconf'        # Debian rcconf is pretty close to Red Hat ntsysv
#alias open='xdg-open'      # Open files and URLs using the GNOME handlers = see `run ()` below!
alias pathping='mtr'         # mtr - a network diagnostic tool
alias ping='ping -c4'        # Only 4 pings by default
alias r='fc -s'              # Recall and execute 'command' starting with...
alias rd='rmdir'             # DOS-ish for rmdir
# Tweaked from http://www.commandlinefu.com/commands/view/8990/generate-an-xkcd-936-style-4-word-password
alias randomwords="shuf -n102 /usr/share/dict/words | perl -ne 'print qq(\u\$_);' | column"
alias ren='mv'               # DOS-ish for mv/rename
#alias rm='rm -i'            # Annoying Red Hat default from /root/.bashrc
alias reloadbind='rndc -k /etc/bind/rndc.key freeze && rndc -k /etc/bind/rndc.key reload && rndc -k /etc/bind/rndc.key thaw' # Reload dynamic BIND zones after editing db.* files
alias shff="echo ' PID        USER    %CPU    %MEM  START COMMAND'; ps auwx | grep '[f]irefox' | perl -alne 'printf (\"%5d %10s %7.2f %7.2f %s %s %s %s %s %s\\n\", @F[1,0,2,3,8,10..@F-1]);'"
alias shffu="shff | grep -v 'contentproc' | egrep '\b$USER\b|^ +PID' --color=no"
alias ffsh='shff'
alias killallff="kill $(ps auwx | grep '/usr/lib/firefox/firefox' | awk '{print $2}')"
alias shacheck='sha256sum --ignore-missing --check'
alias showrss='perl -ne '\''print qq($1\n) if m/outline title="([^"]+)".*?type="folder"/; print qq(\t$1\t$2\n) if m/outline title="([^"]+)".*?xmlUrl="([^"]+)"/;'\'' ~/.config/liferea/feedlist.opml'
#alias stupiddate="date '+/cpoutput/.../archive/%Y/%b/%a-%d'"
alias svndiff='meld'         # Cool GUI diff, similar to TortoiseMerge
alias svneol='svn propset svn:eol-style'  # One of 'native', 'LF', 'CR', 'CRLF'
alias svnexe='svn propset svn:executable on'
# see func svnignore below
alias svnkey='svn propset svn:keywords "id url"'
alias svnpropfix='svn propset svn:keywords "id url date"'
alias sw='sshfsw'            # shorter name
alias tf='terraform'         # shorter name
alias top10='sort | uniq -c | sort -rn | head'
alias tracert='traceroute'   # DOS-ish for traceroute
alias vzip='unzip -lvM'      # View contents of ZIP file
alias wgetdir="wget --no-verbose --recursive --no-parent --no-directories \
 --level=1"                  # Grab a whole directory using wget
alias wgetsdir="wget --no-verbose --recursive --timestamping --no-parent \
 --no-host-directories --reject 'index.*'"  # Grab a dir and sub-dirs
alias zonex='host -l'        # Extract (dump) DNS zone

# Python one-liners!  (Also in `cl`)
# Adapted from https://unix.stackexchange.com/a/359838
alias csv2tab="python -c \"import csv, sys; csv.writer(sys.stdout, delimiter='\t', lineterminator='\n').writerows(csv.reader(sys.stdin))\""
alias tab2csv="python -c \"import csv, sys; csv.writer(sys.stdout, lineterminator='\n').writerows(csv.reader(sys.stdin, delimiter='\t'))\""
# Tweaked from https://wiki.python.org/moin/Powerful%20Python%20One-Liners
alias csv2json="python -c \"import csv, json, sys; print(json.dumps(list(csv.reader(sys.stdin))))\""
alias tab2json="python -c \"import csv, json, sys; print(json.dumps(list(csv.reader(sys.stdin, delimiter='\t'))))\""
# "Pretty"
alias csv2jsonp="python -c \"import csv, json, sys; print(json.dumps(list(csv.reader(sys.stdin)), indent=2))\""
alias tab2jsonp="python -c \"import csv, json, sys; print(json.dumps(list(csv.reader(sys.stdin, delimiter='\t')), indent=2))\""

# Date/time
alias iso8601="date '+%Y-%m-%dT%H:%M:%S%z'"  # ISO-8601 Time
alias now="date       '+%F %T %Z(%z)'"       # More readable ISO-8601 local
alias utc="date --utc '+%F %T %Z(%z)'"       # More readable ISO-8601 UTC

# Neat stuff from http://xmodulo.com/useful-bash-aliases-functions.html
alias meminfo='free -m -l -t'   # See how much memory you have left.
alias whatpid='ps auwx | grep'  # Get PID and process info
alias whatppid='ps -alx | grep' # Get PPID and process info
alias ports='sudo netstat -tulanp'    # Show which applications are connecting to the network
# -p needs root
# sudo netstat --tcp --udp --listening --all --numeric --program
alias newnetstat='sudo ss -tulpan' # dump socket statistics

# Set up some shortcuts if we're using systemd
[ -x /bin/systemctl ] && {
    alias sysc='sudo systemctl'
    alias syscs='sudo systemctl status'
    alias syscr='sudo systemctl restart'
    alias syscl='sudo systemctl reload'
    alias ssysc='sudo systemctl status'
    alias rsysc='sudo systemctl restart'
    alias lsysc='sudo systemctl reload'
}

# Set up some shortcuts if we're using apt
# Mostly obsoleted by 'deb' wrapper
if [ -x /usr/bin/dpkg ]; then
    [ "$UID" = '0' ] || sudo='sudo '  # Prefix 'sudo' if we're not root
    # As of Debian 'Etch' `aptitude` is recommended over `apt-get`, so use if aval.
    # Later that changed back so now `apt-get` was recommended again.
    # The latest is that it's `apt` which is easier to type.
    if [ -x /usr/bin/aptitude ]; then
        #alias ag="${sudo}aptitude"  # Conflicts with silversearcher-ag
        alias agi="${sudo}aptitude install"
        alias agu="${sudo}aptitude update"
        # Also, I find typing 'aptitude' arduous
        # [ -x /usr/bin/aptitude ] && alias apt="${sudo}aptitude" # New `apt` tool!
    else
        #alias ag="${sudo}apt-get"  # Conflicts with silversearcher-ag
        alias agi="${sudo}apt-get install"
        alias agu="${sudo}apt-get update"
    fi
    alias dp="${sudo}dpkg"
    # See http://www.togaware.com/linux/survivor/Wajig_Overview.html
    #[ -x /usr/bin/wajig ] && alias wg="${sudo}/usr/bin/wajig"

    alias ac="${sudo}apt-cache"
    function acs { apt-cache search $* | sort | less --quit-if-one-screen; }
    function aci { apt-cache show   $* | less --quit-if-one-screen; }

    unset sudo
fi

# if the script exists and is executable, create an alias to get
# web server headers
#for path in ${PATH//:/ }; do
#    [ -x "$path/lwp-request" ] && alias httpdinfo='lwp-request -eUd' && break
#done
alias httpdinfo='curl -LI'

# Try to use kbdrate to make the keyboard go faster, but don't complain if
# it's not there.  Easier/faster to throw out error if it's not there...
#kbdrate -r 30.0 -d 250 >& /dev/null


# Useful functions

# Make it easy to say things
function say {
    spd-say "$*"
}


# Expand a "shortened" URL (last one in case of "301 Moved Permanently")
function expandurl {
    curl -ILs $1 | grep '^Location:' | tail -n1
}
# DHCP ISP External IPA, What Is My IP
function whatismyip {
    curl https://ipinfo.io/$1
}

# Set SVN Ignore for arguments on the current dir (.)
function svnignore {
    svn propset svn:ignore "$*" .
}


# Fancy Pandoc to HTML rendering
# Idea: https://00formicapunk00.wordpress.com/2022/08/19/everything-markdown-with-pandoc/
# Great CSS from: wget http://benjam.info/panam/styling.css
function pd2html {
    src="$1"
    basename="${src##*/}"         # Trim leading path
    basename="${basename%%.*}"    # Trim trailing .ext
    dst="${2:-.}/$basename.html"  # Default is ./<basename>.html
    echo "Rendering '$src' to '$dst'..."
    pandoc "$src" --include-in-header=$SETTINGS/panam-styling-include.css \
      --metadata pagetitle="$basename" --to html5 --table-of-contents > "$dst"
    # Note "--standalone" results in this, which is NOT what we want:
    # BAD: <link rel="stylesheet" href="/opt/bin/settings/panam-styling.css" />
    # But "--self-contained" tries to pull in EVERYTHING, including Google fonts!
    # "--include-in-header=" works, but requires the included file be hacked
    # to wrap the CSS in <style type="text/css"> ... </style> tags.  So
    # while I was at it, I also hacked it to remove Google fonts and to cut
    # WAY down on p,ul,ol,li margin-top & margin-bottom (leading).
}


# Use 'xdg-open' (was 'gnome-open') to "run" things
function run {
    [ -r "$*" ] && {
        xdg-open "$*" >& /dev/null
    } || {
        echo "'$*' not found or not readable!"
    }
}


# Python version of 'perl -c'
function python-c {
    python -m py_compile "$1" && rm -f "${1}c"
}


# cd to the bottom of a narrow but deep dir tree
function bot {
    local dir=${1:-.}
    #\cd $(dirname $(find $dir | tail -1))
    \cd $(find . -name CVS -prune -o -type d -print | tail -1)
}


# mkdir newdir then cd into it
# usage: mcd (<mode>) <dir>
function mcd {
    local newdir='_mcd_command_failed_'
    if [ -d "$1" ]; then         # Dir exists, mention that...
        echo "$1 exists..."
        newdir="$1"
    else
        if [ -n "$2" ]; then     # We've specified a mode
            command mkdir -p -m $1 "$2" && newdir="$2"
        else                     # Plain old mkdir
            command mkdir -p "$1" && newdir="$1"
        fi
    fi
    builtin cd "$newdir"         # No matter what, cd into it
} # end of mcd


# Trivial command line calculator
function calc {
    # INTEGER ONLY! --> echo The answer is: $(( $* ))
    # Floating point
    awk "BEGIN {print \"$* = \" $* }";
    #awk "BEGIN {printf \"$* = %f\", $* }";
} # end of calc
function rcalc {
    awk "BEGIN {print \"$\" $* \" = $*\" }";
} # end of rcalc (raw)
function addup {
    awk '{sum += $1} END {print sum}'
}


# Allow use of 'cd ...' to cd up 2 levels, 'cd ....' up 3, etc. (like 4NT/4DOS)
# Usage: cd ..., etc.
function cd {

    local option= length= count= cdpath= i= # Local scope and start clean

    # If we have a -L or -P sym link option, save then remove it
    if [ "$1" = "-P" -o "$1" = "-L" ]; then
        option="$1"
        shift
    fi

    # Are we using the special syntax?  Make sure $1 isn't empty, then
    # match the first 3 characters of $1 to see if they are '...' then
    # make sure there isn't a slash by trying a substitution; if it fails,
    # there's no slash.  Both of these string routines require Bash 2.0+
    if [ -n "$1" -a "${1:0:3}" = '...' -a "$1" = "${1%/*}" ]; then
        # We are using special syntax
        length=${#1}  # Assume that $1 has nothing but dots and count them
        count=2       # 'cd ..' still means up one level, so ignore first two

        # While we haven't run out of dots, keep cd'ing up 1 level
        for ((i=$count;i<=$length;i++)); do
            cdpath="${cdpath}../" # Build the cd path
        done

        # Actually do the cd
        builtin cd $option "$cdpath"
    elif [ -n "$1" ]; then
        # We are NOT using special syntax; just plain old cd by itself
        builtin cd $option "$*"
    else
        # We are NOT using special syntax; plain old cd by itself to home dir
        builtin cd $option
    fi
} # end of cd


# Do site or host specific things here
case $HOSTNAME in
    onefish*|moes*|maggie*|mage*|charlotte*|selma* )
        [ -r "$SETTINGS/counterpane.com" ] && source $SETTINGS/counterpane.com

        # TEMP
        # Nuke the ssh-agent -k trap set in /etc/bash_profile_filterdev
        # and maybe elsewhere
        trap ' [ "$PS1" ] && clear ' 0
        ;;
    *.company.com     ) # source $SETTINGS/company.com
                      ;;
    host1.*           ) # host1 stuff
                      ;;
    host2.company.com ) # source .bashrc.host2
                      ;;
    drake.*           ) # echo DRAKE in bashrc.jp!
                        export TAPE=/dev/tape
                      ;;
esac
