#!/bin/bash -
# tz--Trivial script to convert time zones using GNU date
# JP 2018-12-19
# $URL: file:///home/SVN/usr_local_bin/tz $
# $Id: tz 2090 2018-12-20 01:38:41Z root $

# See:
#    `man date` examples
#    `man tzselect` & `man zdump`
#    https://crashcourse.housegordon.org/gnu-date-timezones.html
#    Super LAME TDD: ~/MyDocs/HOME/CODE/Shell/tz-test
#
# To find timezones use `tzselect` or `ll /usr/share/zoneinfo`

if [ "$1" = '-h' -o "$1" = '--help' ]; then
    cat <<-EoN

	tz--Trivial script to convert time zones
	    usage: $0 <action> (<time | @Epoch>)
	e.g.
	    $0 2sv 12:30
	    $0 sv 12:30
	    $0
	    $0 '+ 2 days'

	Note: you must prefix an Epoch time with "@", like:
	    $0 2l '@1545237000'

	Convert local time to other times--uses "now" if <time> not given:
	    2l*ocal    = To local time
	    2u*tc      = To UTC
	    2r*eston   = To VA (America/New_York)
	    2s*v       = To SV (America/Los_Angeles)
	    2g*b       = To Great Briton/London (Europe/London)
	    2a*u       = To Australia/Sydney

	Convert other times to local--you MUST supply the <time>:
	    u*tc       = From UTC
	    r*eston    = From VA (America/New_York)
	    s*v        = From SV (America/Los_Angeles)
	    g*b        = From Great Briton/London (Europe/London)
	    a*u        = From Australia/Sydney
	EoN
    exit 0
fi

action="$1"             # What to do
users_time="${2:-now}"  # Given time or "now"
#OUTPUT_FORMAT='+%a %F %I:%M:%S / %H:%M:%S %Z/%z (%s)'
OUTPUT_FORMAT='+%a %F (%I)%H:%M:%S %Z/%z (%s)'
VALIDATION_FORMAT='+%F %T %z'

# The user given local time ($users_time) can be any crazy thing, or nothing,
# so validate that into a canonical ISO 8601-ish format:
function Validate_Time_Input {
    # UGLY: set GLOBAL $time, because this all breaks if inside $()... :-(
    local users_time="$1"
    valid_time="$(date -d "$users_time" "$VALIDATION_FORMAT")" || {
        echo "FATAL: I can't figure out what '$users_time' is...try man date?"
        exit 1
    }
} # end of function Validate_Time_Input

Validate_Time_Input "$users_time"  # UGLY: Sets GLOBAL $time

case "$action" in
    # Convert VALIDATED local time to other times
    2l*       )                             date -d "$valid_time" "$OUTPUT_FORMAT" ;;
    2u*       ) TZ='UTC'                    date -d "$valid_time" "$OUTPUT_FORMAT" ;;
    2r* | 2v* ) TZ='America/New_York'       date -d "$valid_time" "$OUTPUT_FORMAT" ;;
    2s*       ) TZ='America/Los_Angeles'    date -d "$valid_time" "$OUTPUT_FORMAT" ;;
    2g*       ) TZ='Europe/London'          date -d "$valid_time" "$OUTPUT_FORMAT" ;;
    2a*       ) TZ='Australia/Sydney'       date -d "$valid_time" "$OUTPUT_FORMAT" ;;

    # Convert other times to local, NOTE "user's" time, not validated time!
    #l*  ) this is pointless
    u*        ) date -d "TZ=\"UTC\"                    $users_time" "$OUTPUT_FORMAT" ;;
    r* | v*   ) date -d "TZ=\"America/New_York\"       $users_time" "$OUTPUT_FORMAT" ;;
    s*        ) date -d "TZ=\"America/Los_Angeles\"    $users_time" "$OUTPUT_FORMAT" ;;
    g*        ) date -d "TZ=\"Europe/London\"          $users_time" "$OUTPUT_FORMAT" ;;
    a*        ) date -d "TZ=\"Australia/Sydney\"       $users_time" "$OUTPUT_FORMAT" ;;

    *         )  # Just show some "now" (or validated given)!  Recursive!
        # If we get here then we'll try to treat "$action" as a time
        [ -z "$action" ] && action='now'  # But it can't be empty...
        Validate_Time_Input "$action"  # UGLY: Sets GLOBAL $time
        echo -n "Local:  " ; $0 2l "$valid_time"
        echo -n "UTC:    " ; $0 2u "$valid_time"
        echo -n "VA:     " ; $0 2r "$valid_time"
        echo -n "SV:     " ; $0 2s "$valid_time"
        echo -n "London: " ; $0 2g "$valid_time"
        echo -n "Sydney: " ; $0 2a "$valid_time"
    ;;
esac
